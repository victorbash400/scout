# üïµÔ∏è SCOUT - Cursor Rules

## üìã PROJECT OVERVIEW
This is SCOUT - an AI system that takes business plans and outputs GO/NO-GO decisions with comprehensive market intelligence reports. The system uses a 7-agent architecture built with AWS Bedrock, Strands SDK, and AgentCore.

## üèóÔ∏è ARCHITECTURE REFERENCE
**ALWAYS REFERENCE THE SCOUT_BLUEPRINT.md** for:
- 7-agent system specifications (Planner, Orchestrator, Competition, Market, Financial, Risk, Synthesis)
- Technical architecture requirements (AWS Bedrock, Strands SDK, AgentCore)
- File structure and component organization
- Agent input/output specifications
- Processing flow and technology stack

## üéØ DEVELOPMENT GUIDELINES

### Backend Development (scout-backend/)
- **VIRTUAL ENVIRONMENT**: ALWAYS activate the virtual environment before running tests or backend operations:
  ```bash
  cd scout-backend
  myenv\Scripts\activate  # Windows
  # or
  source myenv/bin/activate  # Linux/Mac
  ```
- Follow the agent-based architecture from the blueprint
- Use AWS Bedrock for all LLM calls (Claude-3.5-Sonnet)
- Implement Strands SDK for agent development
- Use AgentCore for cloud tools (browser, code interpreter, memory)
- Store documents in Amazon S3
- Monitor with Amazon CloudWatch

### Frontend Development (scout-frontend/)
- Built with React + TypeScript + Vite
- Uses Tailwind CSS for styling
- Follow the component structure outlined in the blueprint
- Implement real-time agent progress tracking
- Create comprehensive report visualization

### File Structure Compliance
- Follow the exact file structure specified in SCOUT_BLUEPRINT.md
- Backend: agents/, core/, utils/, api/, config/ directories
- Frontend: components/, pages/, utils/, styles/ directories
- Maintain separation of concerns between agents

## üîß TECHNICAL REQUIREMENTS

### Agent Implementation
- Each agent must produce **massive datasets**, not summary lines
- Competition Agent: 50+ competitor profiles, pricing matrices, market positioning
- Market Agent: demographic breakdowns, TAM/SAM/SOM calculations, growth projections
- Financial Agent: unit economics, cash flow projections, scenario analyses
- Risk Agent: regulatory requirements, threat scenarios, mitigation strategies
- Synthesis Agent: executive reports with charts, graphs, and GO/NO-GO recommendations

### Processing Flow
1. Plan Intake ‚Üí Planner processes business plan
2. Task Distribution ‚Üí Orchestrator deploys specialist agents
3. Parallel Research ‚Üí 4 agents execute simultaneously
4. Intelligence Synthesis ‚Üí Synthesis agent combines findings
5. Delivery ‚Üí Complete Scout Report with recommendation

### Technology Stack
- **Agent Framework**: Strands SDK
- **LLM Platform**: Amazon Bedrock (Claude-3.5-Sonnet)
- **Cloud Tools**: AgentCore (browser, code interpreter, memory)
- **Data Storage**: Amazon S3
- **Monitoring**: Amazon CloudWatch

## üöÄ DEVELOPMENT WORKFLOW

### Before Starting Work
1. Read SCOUT_BLUEPRINT.md for context
2. Activate virtual environment for backend work
3. Check current file structure against blueprint requirements
4. Understand the 7-agent system architecture

### Code Quality Standards
- Write comprehensive docstrings for all agent functions
- Include error handling for AWS service calls
- Implement proper logging for agent coordination
- Follow Python/TypeScript best practices
- Ensure all agents can handle parallel execution

### Testing Requirements
- **Backend**: Always activate virtual environment before running tests
- Test each agent independently
- Test agent coordination and orchestration
- Validate AWS service integrations
- Test report generation and visualization

## üìä OUTPUT SPECIFICATIONS

### Final System Output Must Include
- **Executive Dashboard**: GO/NO-GO decision with confidence scores
- **Intelligence Report**: 150+ page comprehensive analysis with charts and graphs
- **Strategic Action Plan**: 90-day roadmap with specific milestones

### Agent Output Requirements
- Competition Agent: Complete competitor profiles, pricing matrices, market share analysis
- Market Agent: Detailed demographics, TAM/SAM/SOM calculations, growth projections
- Financial Agent: Unit economics models, cash flow projections, scenario analyses
- Risk Agent: Regulatory compliance, threat scenarios, mitigation strategies

## üîç DEBUGGING & TROUBLESHOOTING

### Common Issues
- Virtual environment not activated ‚Üí Always run `myenv\Scripts\activate` first
- AWS credentials not configured ‚Üí Check Bedrock and S3 access
- Agent coordination failures ‚Üí Verify Orchestrator agent implementation
- Report generation errors ‚Üí Check Synthesis agent data processing

### Performance Considerations
- Implement parallel agent execution
- Use efficient data structures for large datasets
- Optimize AWS service calls
- Cache frequently accessed data

## üìù DOCUMENTATION REQUIREMENTS
- Update SCOUT_BLUEPRINT.md if architecture changes
- Document all agent configurations
- Maintain API documentation
- Include deployment instructions
- Document AWS service setup and configuration

## üéØ SUCCESS CRITERIA
- All 7 agents implemented and functional
- Parallel agent execution working
- Comprehensive report generation
- Real-time progress tracking
- GO/NO-GO decision accuracy
- AWS service integration complete

---

**Remember**: This is a sophisticated AI system for business intelligence. Always prioritize the agent architecture, AWS integration, and comprehensive data analysis over simple implementations.
